## SECTION : BLACK
[tool.black]
target-version = ["py39", "py310", "py311"]         ## version
include = '\.pyi?$'
preview = true
line-length = 120   # must agree with Ruff
exclude = '''
/(
    \.bzr
  | \.direnv
  | \.cache
  | \.egg
  | \.eggs
  | \.env 
  | \.git
  | \.hg
  | \.mypy_cache
  | \.nox
  | \.pants.d
  | \.pytype
  | \.ruff_cache
  | \.svn
  | \.tox
  | \.venv
  | __pypackages__
  | _build
  | buck-out
  | build
  | dist
  | env
  | migrations
  | node_modules
  | output
  | venv
)/
'''

## SECTION : RUFF
[tool.ruff]
# ref: https://beta.ruff.rs/docs/rules
# Rule E402 (module-level import not top-level) is disabled as isort handles it
# Rule E501 (line too long) is left to Black; some strings are worse for wrapping

target-version = 'py39' ## version
line-length = 120  # must agree with Black
show-source = true
cache-dir = ".cache/ruff"
task-tags = ["TODO", "FIXME", "XXX"]

src = ["nanobolt"]

select = ["E", "F"]
unfixable = []
fixable = [
    "A",      # flake8-builtins
    "ANN",    # flake8-annotations 
    "ARG",    # flake8-unused-arguments
    "ASYNC",  # flake8-async
    "B",      # flake8-bugbear
    "BLE",    # flake8-blind-except
    "C4",     # flake8-comprehensions
    "C90",    # McCabe cyclomatic complexity
    "COM",    # flake8-commas
    "D",      # pydocstyle
    "DTZ",    # flake8-datetimez
    "E",      # Error
    "EM",     # flake8-errmsg
    "EXE",    # flake8-executable    
    "F",      # Pyflakes
    "FA",     # flake8-future-annotations
    "FLY",    # flynt
    "FBT",    # flake8-boolean-trap
    "G",      # flake8-logging-format
    "I",      # isort
    "ICN",    # flake8-import-conventions
    "INP",    # flake8-no-pep420
    "INT",    # flake8-gettext
    "ISC",    # flake8-implicit-str-concat
    "N",      # pep8-naming
    "PGH",    # pygrep-hooks
    "PIE",    # flake8-pie
    "PLC",    # pylint-convension
    "PLE",    # pylint-error
    "PLR",    # pylint-refactor
    "PLW",    # pylint-warning
    "PT",     # flake8-pytest-style
    "PTH",    # flake8-use-pathlib
    "PYI",    # flake8-pyi
    "RET",    # flake8-return
    "RSE",    # flake8-raise
    "RUF",    # Ruff-specific rules
    "Q",      # flake8-quotes
    "S",      # bandit
    "SIM",    # flake8-simplify
    "SLF",    # flake8-self
    "T10",    # flake8-debugger
    "TCH",    # flake8-type-checking
    "TD",     # flake8-todos
    "TID",    # flake8-tidy-imports
    "TRY",    # tryceratops
    "UP",     # pyupgrade
    "W",      # Warning
    "YTT",    # flake8-2020
]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".cache",
    ".egg",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "env",
    ".env",
    "migrations",
    "node_modules",
    "venv",
    ".venv",
]

ignore = [
    "B905",  # zip strict=True; remove once python <3.10 support is dropped.
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D200",
    "D401",
    "E402",
    "E501",
    "F401",
    "TRY003",  # Avoid specifying messages outside exception class; overly strict, especially for ValueError
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.mccabe]
max-complexity = 17  # default: 10

[tool.ruff.flake8-bugbear]
extend-immutable-calls = [
    "chr",
    "typer.Argument",
    "typer.Option",
]

[tool.ruff.per-file-ignores]
"docs/*" = ['D']
"tests/*.py" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "S101",  # use of "assert"
    "S102",  # use of "exec"
    "S106",  # possible hardcoded password.
    "PGH001",  # use of "eval"
]

[tool.ruff.isort]
combine-as-imports = true
extra-standard-library = ['typing_extensions']
split-on-trailing-comma = false
relative-imports-order = 'furthest-to-closest'
known-first-party = ['coaster']
section-order = ['future', 'standard-library', 'third-party', 'first-party', 'local-folder']

[tool.ruff.pep8-naming]
staticmethod-decorators = [
    "pydantic.validator",
    "pydantic.root_validator",
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.pylint]
allow-magic-value-types = ["float", "int", "str"]
max-args = 10        # default: 5
max-branches = 20    # default: 12
max-returns = 8      # default: 6
max-statements = 88  # default: 50


## SECTION : MYPY
[tool.mypy]
# ref: https://mypy.readthedocs.io/en/stable/config_file.html
python_version = "3.10"                         ## version
files = ["nanobolt", "tests"]                   ## path
cache_dir = ".cache/mypy"
#exclude =
namespace_packages = false
explicit_package_bases = false
ignore_missing_imports = true                   # when true, mypy ignores missing imports. If False, mypy gives an error
follow_imports = "silent"                       # determines how mypy follows imported Python modules. If 'silent', mypy follows all imports and silences errors about modules it can't find
follow_imports_for_stubs = false
no_site_packages = false
no_silence_site_packages = false

# Disallow dynamic typing
disallow_any_unimported = true                  # gives an error when there is a value whose type mypy can't infer and is not annotated
disallow_any_expr = false # TODO                # disallows all expressions in the module that have type Any
disallow_any_decorated = false # TODO           # disallows functions that have Any in their signature after decorator transformation
disallow_any_explicit = true                    # explicit Any in type positions such as type annotations and generic type parameters
disallow_any_generics = true                    # disallows usage of generic types that do not specify explicit type parameters
disallow_subclassing_any = true                 # disallows subclassing a value of type Any

# Untyped definitions and calls
disallow_untyped_calls = true                   # disallows calling functions without type annotations from functions with type annotations
disallow_untyped_defs = true                    # disallows defining functions without type annotations or with incomplete type annotations 
check_untyped_defs = true                       # type-checks the interior of functions without type annotations
disallow_untyped_decorators = true              # throws error whenever a function with type annotations is decorated with a decorator without annotations

# None and Optional handling
no_implicit_optional = true                     # treats unannotated arguments and return values as having type Any
strict_optional = true                          # enables/disables strict Optional checks. If False, mypy treats None as compatible with every type

# Configuring warnings
warn_redundant_casts = true                     # warns about casting an expression to its inferred type
warn_unused_ignores = true                      # warns about unneeded # type: ignore comments
warn_no_return = true                           # shows errors for missing return statements on some execution paths
warn_return_any = true                          # raises a warning when a function annotated with a non-Any type returns a value of type Any
warn_unreachable = true                         # shows a warning when encountering any code inferred to be unreachable or redundant after performing type analysis

# Suppressing errors
ignore_errors = false                           # ignores all non-fatal errors
enable_error_code = "ignore-without-code"       # allows enabling one or multiple error codes globally

# Miscellaneous strictness flags
allow_untyped_globals = false                   # causes mypy to suppress errors caused by not being able to fully infer the types of global and class variables
allow_redefinition = false                      # allows variables to be redefined with an arbitrary type, as long as the redefinition is in the same block and nesting level as the original definition
local_partial_types = false                     # disallows inferring variable type for None from two assignments in different scopes
implicit_reexport = true                        # by default (true), imported values to a module are treated as exported and mypy allows other modules to import them
strict_equality = true                          # prohibit equality checks, identity checks, and container checks between non-overlapping types

# Configuring error messages
pretty = true                                   # visually nicer output in error messages: use soft word wrap, show source code snippets, and show error location markers
show_error_context = true                       # prefixes each error with the relevant context
show_column_numbers = true                      # shows column numbers in error messages
show_error_codes = true                         # shows error codes that can be used with `# type: ignore[<code>]` comments to silence specific errors


## SECTION : PYTEST
[tool.pytest.ini_options]
testpaths = ["tests"]                           ## path
minversion = "7.0"
cache_dir = ".cache/pytest"
required_plugins = [
  "pytest-cov",
  "pytest-dotenv",
  "pytest-rerunfailures",
  "requests-mock",
]
addopts = [
    "--verbose",
    "--strict-markers",
    "--strict-config",
    "--html=output/report/test/results.html",
    "--junitxml=output/report/test/junit.xml",
    "--cov=nanobolt",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

env_files = ['.env.testing', '.env']

# Treat all warnings as errors - Ignore certain warnings
filterwarnings = [
    "error",
    "ignore::UserWarning",
]

# Run doctests on all .py files
doctest_optionflags = "NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL ALLOW_UNICODE ALLOW_BYTES"

xfail_strict = true                             # Display summary information for all expected failures
empty_parameter_set_mark = "xfail"

log_level = "INFO"
log_cli = "1"
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

markers = [
  "slow: mark a test as slow",
  "network: mark a test as network",
  "db: tests requiring a database (mysql or postgres)",
  "clipboard: mark a pd.read_clipboard test",
]

[tool.coverage.run]
data_file = "output/report/coverage/.coverage"
branch = true
source = ["nanobolt"]                   ## path                              
omit = [
    "*/tests/*",
    ".venv/*",
    ".idea/*",
    "setup*",
    ".eggs/*",
    ".tox/*",
    "build/*",
    "dist/*",
    "output/*",
    "nanobolt/version.py"
]

[tool.coverage.report]
show_missing = true
#fail_under = 85
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self\\.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]
ignore_errors = true

[tool.coverage.json]
output = "output/report/coverage/coverage.json"
pretty_print = true
show_contexts = true

[tool.coverage.html]
directory = "output/report/coverage/html"
skip_empty = true

[tool.coverage.xml]
output = "output/report/coverage/coverage.xml"


# todo: add spell check like codespell