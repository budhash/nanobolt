[mypy]
# List of directories or files to type check. 
# Separate each directory or file with a comma.
files = 
	nanobolt,
	tests

# Minimum Python version supported. Since variable annotations were introduced
# in Python 3.6, this should be set to at least 3.6.
python_version = 3.8

# `exclude` is a regex that matches file paths that mypy should ignore
# while type checking. 
# exclude =

# If True, mypy ignores missing imports. If False, mypy gives an error
# if it can't find any module or package imported in the source code.
ignore_missing_imports = True

# If True, mypy gives an error when a function definition doesn't have type annotations.
disallow_untyped_defs = True

# If True, mypy gives an error when there is a value whose type mypy can't infer and is not annotated.
disallow_any_unimported = True

# If True, mypy treats unannotated arguments and return values as having type Any.
no_implicit_optional = True

# If True, mypy checks the body of every function, including those without type annotations.
# If False, mypy only checks the bodies of functions that are annotated.
check_untyped_defs = True

# If True, mypy raises a warning when a function annotated with a non-Any type returns a value of type Any.
warn_return_any = True

# If True, mypy shows error codes that can be used with `# type: ignore[<code>]` comments to silence specific errors.
show_error_codes = True

# If True, mypy raises a warning when an ignore comment is not silencing any errors.
warn_unused_ignores = True

# Determines how mypy follows imported Python modules. If 'silent', mypy follows all imports and silences errors about modules it can't find.
follow_imports = silent

# If True, mypy allows variable types to be redefined in the same scope where they were previously defined.
allow_redefinition = True

# If True, mypy warns about casting an expression to its inferred type.
warn_redundant_casts = True

# If True, mypy shows column numbers in error messages.
show_column_numbers = True
